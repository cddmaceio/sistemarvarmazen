// Script para limpar todos os lan√ßamentos do usu√°rio espec√≠fico
require('dotenv').config();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const CPF_USUARIO = '699.895.404-20';

async function limparLancamentosUsuario() {
  console.log('üßπ LIMPEZA DE LAN√áAMENTOS - USU√ÅRIO TESTE');
  console.log('===============================================\n');

  try {
    // 1. Buscar o usu√°rio pelo CPF
    console.log('1. üîç Buscando usu√°rio...');
    const userResponse = await fetch(`${SUPABASE_URL}/rest/v1/usuarios?cpf=eq.${CPF_USUARIO}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!userResponse.ok) {
      throw new Error(`Erro ao buscar usu√°rio: ${userResponse.status}`);
    }

    const users = await userResponse.json();
    if (users.length === 0) {
      console.log('‚ùå Usu√°rio n√£o encontrado!');
      return;
    }

    const user = users[0];
    console.log(`‚úÖ Usu√°rio encontrado: ${user.nome} (ID: ${user.id})`);

    // 2. Buscar todos os lan√ßamentos do usu√°rio
    console.log('\n2. üìã Buscando lan√ßamentos existentes...');
    const lancamentosResponse = await fetch(`${SUPABASE_URL}/rest/v1/lancamentos_produtividade?user_id=eq.${user.id}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!lancamentosResponse.ok) {
      throw new Error(`Erro ao buscar lan√ßamentos: ${lancamentosResponse.status}`);
    }

    const lancamentos = await lancamentosResponse.json();
    console.log(`üìä Total de lan√ßamentos encontrados: ${lancamentos.length}`);

    if (lancamentos.length === 0) {
      console.log('‚úÖ Nenhum lan√ßamento para limpar!');
      return;
    }

    // 3. Mostrar resumo dos lan√ßamentos
    console.log('\nüìã Resumo dos lan√ßamentos:');
    const statusCount = {};
    const dateCount = {};
    
    lancamentos.forEach(l => {
      statusCount[l.status] = (statusCount[l.status] || 0) + 1;
      const date = new Date(l.data_lancamento).toLocaleDateString('pt-BR');
      dateCount[date] = (dateCount[date] || 0) + 1;
    });

    console.log('   Por status:');
    Object.entries(statusCount).forEach(([status, count]) => {
      console.log(`     - ${status}: ${count}`);
    });

    console.log('   Por data (primeiras 10):');
    Object.entries(dateCount).slice(0, 10).forEach(([date, count]) => {
      console.log(`     - ${date}: ${count}`);
    });

    // 4. Confirmar limpeza
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR TODOS os lan√ßamentos!');
    console.log('   Isso liberar√° todas as datas para novos testes.');
    
    // 5. Deletar todos os lan√ßamentos
    console.log('\n3. üóëÔ∏è  Deletando lan√ßamentos...');
    const deleteResponse = await fetch(`${SUPABASE_URL}/rest/v1/lancamentos_produtividade?user_id=eq.${user.id}`, {
      method: 'DELETE',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!deleteResponse.ok) {
      throw new Error(`Erro ao deletar lan√ßamentos: ${deleteResponse.status}`);
    }

    console.log('‚úÖ Lan√ßamentos deletados com sucesso!');

    // 6. Verificar se a limpeza foi efetiva
    console.log('\n4. ‚úÖ Verificando limpeza...');
    const verifyResponse = await fetch(`${SUPABASE_URL}/rest/v1/lancamentos_produtividade?user_id=eq.${user.id}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const remainingLancamentos = await verifyResponse.json();
    console.log(`üìä Lan√ßamentos restantes: ${remainingLancamentos.length}`);

    // 7. Testar uma data espec√≠fica
    console.log('\n5. üß™ Testando disponibilidade da data 19/08/2025...');
    const testDate = '2025-08-19';
    const checkLimitResponse = await fetch('http://localhost:8888/api/kpis/check-limit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: user.id,
        data_lancamento: testDate
      })
    });

    if (checkLimitResponse.ok) {
      const limitResult = await checkLimitResponse.json();
      console.log(`‚úÖ Check-limit para ${testDate}: ${limitResult.available ? 'DISPON√çVEL' : 'BLOQUEADO'}`);
      if (!limitResult.available) {
        console.log(`   Motivo: ${limitResult.message}`);
      }
    } else {
      console.log(`‚ùå Erro ao testar check-limit: ${checkLimitResponse.status}`);
    }

    console.log('\nüéØ LIMPEZA CONCLU√çDA!');
    console.log('===============================================');
    console.log('‚úÖ Todos os lan√ßamentos foram removidos');
    console.log('‚úÖ Datas est√£o dispon√≠veis para novos testes');
    console.log('‚úÖ Sistema pronto para testes limpos');

  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error.message);
    process.exit(1);
  }
}

// Executar a limpeza
limparLancamentosUsuario();