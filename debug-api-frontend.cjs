require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugApiFrontend() {
  console.log('üîç DEBUG - API Frontend vs Banco de Dados');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar usu√°rio espec√≠fico
    console.log('\n1Ô∏è‚É£ Verificando usu√°rio CPF 699.895.404-20...');
    const { data: usuario, error: userError } = await supabase
      .from('usuarios')
      .select('*')
      .eq('cpf', '699.895.404-20')
      .single();
    
    if (userError || !usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado!');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio: ${usuario.nome} (ID: ${usuario.id})`);
    
    // 2. Simular exatamente a chamada que o frontend faz
    console.log('\n2Ô∏è‚É£ Simulando chamada do frontend...');
    console.log(`üåê Chamada: /api/lancamentos?user_id=${usuario.id}&status=aprovado`);
    
    // Simular a query que a API faz
    const { data: lancamentosAprovados, error: lancError } = await supabase
      .from('lancamentos_produtividade')
      .select('*')
      .eq('user_id', usuario.id)
      .eq('status', 'aprovado');
    
    if (lancError) {
      console.error('‚ùå Erro ao buscar lan√ßamentos aprovados:', lancError);
      return;
    }
    
    console.log(`üìä Lan√ßamentos aprovados encontrados: ${lancamentosAprovados?.length || 0}`);
    
    if (lancamentosAprovados && lancamentosAprovados.length > 0) {
      console.log('\n‚ùå PROBLEMA IDENTIFICADO: Ainda h√° lan√ßamentos aprovados!');
      console.log('\nüìã DETALHES DOS LAN√áAMENTOS:');
      lancamentosAprovados.forEach((lanc, idx) => {
        console.log(`   ${idx + 1}. ID: ${lanc.id}`);
        console.log(`      Data: ${lanc.data_lancamento}`);
        console.log(`      Status: ${lanc.status}`);
        console.log(`      Remunera√ß√£o: R$ ${lanc.remuneracao_total}`);
        console.log(`      Atividade: ${lanc.nome_atividade}`);
        console.log(`      ---`);
      });
      
      // Verificar se s√£o lan√ßamentos antigos ou novos
      console.log('\nüìÖ AN√ÅLISE TEMPORAL:');
      const agora = new Date();
      lancamentosAprovados.forEach((lanc, idx) => {
        const dataLanc = new Date(lanc.data_lancamento);
        const diffDias = Math.floor((agora.getTime() - dataLanc.getTime()) / (1000 * 60 * 60 * 24));
        console.log(`   ${idx + 1}. ${lanc.data_lancamento} (${diffDias} dias atr√°s)`);
      });
      
    } else {
      console.log('‚úÖ Nenhum lan√ßamento aprovado encontrado (correto)');
    }
    
    // 3. Verificar todos os status para este usu√°rio
    console.log('\n3Ô∏è‚É£ Verificando todos os lan√ßamentos (qualquer status)...');
    const { data: todosLancamentos, error: todosError } = await supabase
      .from('lancamentos_produtividade')
      .select('*')
      .eq('user_id', usuario.id);
    
    if (todosError) {
      console.error('‚ùå Erro ao buscar todos os lan√ßamentos:', todosError);
      return;
    }
    
    console.log(`üìä Total de lan√ßamentos (todos os status): ${todosLancamentos?.length || 0}`);
    
    if (todosLancamentos && todosLancamentos.length > 0) {
      const statusCount = {};
      todosLancamentos.forEach(lanc => {
        statusCount[lanc.status] = (statusCount[lanc.status] || 0) + 1;
      });
      
      console.log('\nüìä Contagem por status:');
      Object.keys(statusCount).forEach(status => {
        console.log(`   ${status}: ${statusCount[status]}`);
      });
    }
    
    // 4. Verificar se h√° cache ou dados em outras tabelas
    console.log('\n4Ô∏è‚É£ Verificando poss√≠veis fontes de cache...');
    
    // Verificar atividades_produtividade
    const { data: atividades, error: ativError } = await supabase
      .from('atividades_produtividade')
      .select('*')
      .eq('user_id', usuario.id);
    
    console.log(`üìä Registros em atividades_produtividade: ${atividades?.length || 0}`);
    
    // Verificar kpis_produtividade
    const { data: kpis, error: kpisError } = await supabase
      .from('kpis_produtividade')
      .select('*')
      .eq('user_id', usuario.id);
    
    console.log(`üìä Registros em kpis_produtividade: ${kpis?.length || 0}`);
    
    // 5. Testar a API real via HTTP
    console.log('\n5Ô∏è‚É£ Testando API real via HTTP...');
    
    try {
      // Simular uma chamada HTTP real
      const apiUrl = `http://localhost:5173/api/lancamentos?user_id=${usuario.id}&status=aprovado`;
      console.log(`üåê Testando: ${apiUrl}`);
      
      const response = await fetch(apiUrl);
      
      if (response.ok) {
        const apiData = await response.json();
        console.log(`üìä API retornou: ${apiData?.length || 0} lan√ßamentos`);
        
        if (apiData && apiData.length > 0) {
          console.log('\n‚ùå CONFIRMADO: API est√° retornando dados!');
          console.log('\nüìã PRIMEIROS 3 REGISTROS DA API:');
          apiData.slice(0, 3).forEach((item, idx) => {
            console.log(`   ${idx + 1}. ID: ${item.id}, Data: ${item.data_lancamento}, Valor: R$ ${item.remuneracao_total}`);
          });
        } else {
          console.log('‚úÖ API retornou array vazio (correto)');
        }
      } else {
        console.log(`‚ùå Erro na API: ${response.status} ${response.statusText}`);
      }
    } catch (fetchError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel testar a API via HTTP (servidor pode estar offline)');
      console.log('   Isso √© normal se o servidor n√£o estiver rodando');
    }
    
    // 6. Resultado final
    console.log('\n6Ô∏è‚É£ DIAGN√ìSTICO FINAL:');
    
    if (lancamentosAprovados && lancamentosAprovados.length > 0) {
      console.log('\nüö® PROBLEMA CONFIRMADO:');
      console.log('   ‚ùå Banco de dados ainda cont√©m lan√ßamentos aprovados');
      console.log('   ‚ùå Frontend est√° correto ao mostrar os dados');
      console.log('   ‚ùå A limpeza anterior n√£o foi completa');
      
      console.log('\nüîß A√á√ÉO NECESS√ÅRIA:');
      console.log('   1. Deletar todos os lan√ßamentos restantes');
      console.log('   2. Verificar se h√° triggers ou procedures que recriam dados');
      console.log('   3. Confirmar que n√£o h√° cache no Supabase');
      
    } else {
      console.log('\n‚úÖ BANCO LIMPO:');
      console.log('   ‚úÖ Nenhum lan√ßamento aprovado no banco');
      console.log('   ‚ùì Frontend pode estar usando cache local');
      console.log('   ‚ùì Ou h√° problema na API/worker');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error);
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('üèÅ Debug da API frontend conclu√≠do!');
}

// Executar debug
debugApiFrontend().catch(console.error);