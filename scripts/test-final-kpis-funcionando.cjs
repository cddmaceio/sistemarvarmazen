const fs = require('fs');
const path = require('path');

console.log('üß™ TESTE FINAL - KPIs FUNCIONANDO');
console.log('==================================\n');

let testsTotal = 0;
let testsApproved = 0;

function test(description, condition) {
  testsTotal++;
  const status = condition ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${description}`);
  if (condition) testsApproved++;
  return condition;
}

// 1. Verificar se o hook useAvailableKPIs processa data.kpisAtingidos
console.log('1. üîß VERIFICA√á√ÉO DO HOOK useAvailableKPIs');
console.log('===============================================');
const useApiPath = path.join(__dirname, 'src', 'hooks', 'useApi.ts');
const useApiContent = fs.readFileSync(useApiPath, 'utf8');

test('Hook processa data.kpisAtingidos', useApiContent.includes('data.kpisAtingidos'));
test('Hook n√£o processa data diretamente como array', !useApiContent.includes('setKpis(data);') || useApiContent.includes('setKpis(kpisData);'));
test('Hook tem fallback para array vazio', useApiContent.includes('|| []'));

// 2. Verificar se a API retorna formato correto
console.log('\n2. üîå VERIFICA√á√ÉO DA API');
console.log('==========================');
const kpisApiPath = path.join(__dirname, 'src', 'worker', 'routes', 'kpis.ts');
const kpisApiContent = fs.readFileSync(kpisApiPath, 'utf8');

test('API retorna objeto com kpisAtingidos', kpisApiContent.includes('kpisAtingidos'));
test('API mapeia nome_kpi corretamente', kpisApiContent.includes('kpi.nome_kpi'));
test('API n√£o retorna array direto', !kpisApiContent.includes('return c.json(kpis || []);'));

// 3. Verificar se o arquivo compilado foi atualizado
console.log('\n3. üì¶ VERIFICA√á√ÉO DO ARQUIVO COMPILADO');
console.log('======================================');
const compiledKpisPath = path.join(__dirname, 'netlify', 'functions-build', 'src', 'worker', 'routes', 'kpis.js');
if (fs.existsSync(compiledKpisPath)) {
  const compiledContent = fs.readFileSync(compiledKpisPath, 'utf8');
  test('Arquivo compilado existe', true);
  test('Arquivo compilado tem kpisAtingidos', compiledContent.includes('kpisAtingidos'));
} else {
  test('Arquivo compilado existe', false);
  test('Arquivo compilado tem kpisAtingidos', false);
}

// 4. Verificar integra√ß√£o com Home.tsx
console.log('\n4. üè† VERIFICA√á√ÉO DA INTEGRA√á√ÉO Home.tsx');
console.log('==========================================');
const homePath = path.join(__dirname, 'src', 'pages', 'Home.tsx');
const homeContent = fs.readFileSync(homePath, 'utf8');

test('Home.tsx usa useAvailableKPIs', homeContent.includes('useAvailableKPIs'));
test('Home.tsx renderiza availableKPIs', homeContent.includes('availableKPIs'));
test('Home.tsx chama fetchAvailableKPIs', homeContent.includes('fetchAvailableKPIs'));
test('Home.tsx n√£o tem importa√ß√£o KPIType desnecess√°ria', !homeContent.includes('KPIType'));
test('Home.tsx n√£o tem kpisLoading desnecess√°rio', !homeContent.includes('kpisLoading'));

// 5. Verificar se n√£o h√° conflitos
console.log('\n5. ‚ö†Ô∏è  VERIFICA√á√ÉO DE CONFLITOS');
console.log('================================');
test('N√£o h√° fun√ß√£o fetchAvailableKPIs duplicada em Home.tsx', !homeContent.includes('const fetchAvailableKPIs'));
test('N√£o h√° estado availableKPIs local em Home.tsx', !homeContent.includes('useState<') || !homeContent.includes('availableKPIs') || homeContent.includes('kpis: availableKPIs'));

// 6. Resumo
console.log('\n6. üìä RESUMO DOS TESTES');
console.log('=======================');
console.log(`   Total de testes: ${testsTotal}`);
console.log(`   Testes aprovados: ${testsApproved}`);
console.log(`   Testes falharam: ${testsTotal - testsApproved}`);
console.log(`   Taxa de sucesso: ${((testsApproved / testsTotal) * 100).toFixed(1)}%`);

if (testsApproved === testsTotal) {
  console.log('\nüéâ TODOS OS TESTES PASSARAM!');
  console.log('=============================');
  console.log('‚úÖ O problema dos KPIs n√£o aparecerem foi RESOLVIDO!');
  console.log('\nüìã FLUXO ESPERADO:');
  console.log('   1. Usu√°rio seleciona fun√ß√£o e turno');
  console.log('   2. useEffect detecta mudan√ßa');
  console.log('   3. fetchAvailableKPIs √© chamado');
  console.log('   4. API retorna {kpisAtingidos: Array}');
  console.log('   5. Hook processa data.kpisAtingidos');
  console.log('   6. KPIs aparecem para sele√ß√£o');
  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('   1. Testar no navegador');
  console.log('   2. Verificar se KPIs aparecem');
  console.log('   3. Confirmar sele√ß√£o funciona');
} else {
  console.log('\n‚ö†Ô∏è  ATEN√á√ÉO! Alguns testes falharam.');
  console.log('\nüîß A√á√ïES NECESS√ÅRIAS:');
  console.log('   1. üîç Revisar os testes que falharam');
  console.log('   2. üîß Aplicar as corre√ß√µes pendentes');
  console.log('   3. üß™ Executar este teste novamente');
}

console.log('\n‚úÖ TESTE FINAL COMPLETO!');
console.log('=========================');