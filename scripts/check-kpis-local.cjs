const http = require('http');

// Configura√ß√£o da API local
const API_BASE = 'http://localhost:5173/.netlify/functions/api';

async function makeRequest(endpoint) {
  return new Promise((resolve, reject) => {
    const url = `${API_BASE}${endpoint}`;
    console.log(`\nüîç Fazendo requisi√ß√£o para: ${url}`);
    
    http.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    }).on('error', (error) => {
      reject(error);
    });
  });
}

async function checkKPIsLocal() {
  console.log('üîç VERIFICANDO KPIs NO SERVIDOR LOCAL');
  console.log('=' .repeat(50));
  
  try {
    // 1. Health check
    console.log('\n1. Health Check:');
    const healthResponse = await makeRequest('/health');
    console.log(`Status: ${healthResponse.status}`);
    console.log(`Resposta: ${JSON.stringify(healthResponse.data, null, 2)}`);
    
    if (healthResponse.status !== 200) {
      console.log('‚ùå Servidor local n√£o est√° respondendo corretamente');
      return;
    }
    
    // 2. Buscar todos os KPIs
    console.log('\n2. Buscando todos os KPIs:');
    const kpisResponse = await makeRequest('/kpis');
    console.log(`Status: ${kpisResponse.status}`);
    
    if (kpisResponse.status === 200 && kpisResponse.data) {
      // A API retorna { kpisAtingidos: [...] }
      const kpisData = kpisResponse.data.kpisAtingidos || kpisResponse.data;
      console.log(`Total de KPIs encontrados: ${Array.isArray(kpisData) ? kpisData.length : 0}`);
      
      if (Array.isArray(kpisData) && kpisData.length > 0) {
        console.log('\nüìä KPIs dispon√≠veis (nomes):');
        kpisData.forEach((kpiName, index) => {
          console.log(`   ${index + 1}. ${kpiName}`);
        });
      } else {
        console.log('‚ùå Nenhum KPI encontrado no banco de dados');
        console.log('Estrutura da resposta:', JSON.stringify(kpisResponse.data, null, 2));
      }
    } else {
      console.log(`‚ùå Erro ao buscar KPIs: ${JSON.stringify(kpisResponse.data, null, 2)}`);
    }
    
    // 3. Buscar fun√ß√µes dispon√≠veis
    console.log('\n3. Buscando fun√ß√µes dispon√≠veis:');
    const functionsResponse = await makeRequest('/functions');
    console.log(`Status: ${functionsResponse.status}`);
    
    if (functionsResponse.status === 200 && functionsResponse.data) {
      console.log(`Fun√ß√µes dispon√≠veis: ${Array.isArray(functionsResponse.data) ? functionsResponse.data.length : 0}`);
      if (Array.isArray(functionsResponse.data) && functionsResponse.data.length > 0) {
        console.log('\nüìã Fun√ß√µes encontradas:');
        functionsResponse.data.forEach((funcao, index) => {
          console.log(`   ${index + 1}. ${funcao}`);
        });
      } else {
        console.log('‚ùå Nenhuma fun√ß√£o encontrada');
        console.log('Resposta:', JSON.stringify(functionsResponse.data, null, 2));
      }
    } else {
      console.log(`‚ùå Erro: ${JSON.stringify(functionsResponse.data, null, 2)}`);
    }
    
    // 4. Buscar KPIs dispon√≠veis para fun√ß√£o e turno espec√≠ficos
    console.log('\n4. Buscando KPIs dispon√≠veis para "Ajudante de Armaz√©m" e "Manh√£":');
    const kpisAvailableResponse = await makeRequest('/kpis/available?funcao=Ajudante de Armaz√©m&turno=Manh√£');
    console.log(`Status: ${kpisAvailableResponse.status}`);
    
    if (kpisAvailableResponse.status === 200 && kpisAvailableResponse.data) {
      const availableKpis = kpisAvailableResponse.data.kpisAtingidos || kpisAvailableResponse.data;
      console.log(`KPIs dispon√≠veis para Ajudante de Armaz√©m (Manh√£): ${Array.isArray(availableKpis) ? availableKpis.length : 0}`);
      if (Array.isArray(availableKpis) && availableKpis.length > 0) {
        console.log('\nüéØ KPIs espec√≠ficos para esta combina√ß√£o:');
        availableKpis.forEach((kpiName, index) => {
          console.log(`   ${index + 1}. ${kpiName}`);
        });
      } else {
        console.log('‚ùå Nenhum KPI dispon√≠vel para esta combina√ß√£o');
        console.log('Resposta completa:', JSON.stringify(kpisAvailableResponse.data, null, 2));
      }
    } else {
      console.log(`‚ùå Erro: ${JSON.stringify(kpisAvailableResponse.data, null, 2)}`);
    }
    
    // 5. Testar outras combina√ß√µes de fun√ß√£o e turno
    console.log('\n5. Testando outras combina√ß√µes:');
    const testCombinations = [
      { funcao: 'Ajudante de Armaz√©m', turno: 'Tarde' },
      { funcao: 'Ajudante de Armaz√©m', turno: 'Noite' },
      { funcao: 'Operador de Empilhadeira', turno: 'Manh√£' },
      { funcao: 'Conferente', turno: 'Manh√£' }
    ];
    
    for (const combo of testCombinations) {
      console.log(`\n   üîç Testando: ${combo.funcao} - ${combo.turno}`);
      const testResponse = await makeRequest(`/kpis/available?funcao=${encodeURIComponent(combo.funcao)}&turno=${encodeURIComponent(combo.turno)}`);
      console.log(`   Status: ${testResponse.status}`);
      
      if (testResponse.status === 200 && testResponse.data) {
        const testKpis = testResponse.data.kpisAtingidos || testResponse.data;
        console.log(`   KPIs encontrados: ${Array.isArray(testKpis) ? testKpis.length : 0}`);
        if (Array.isArray(testKpis) && testKpis.length > 0) {
          console.log(`   üìã Nomes: ${testKpis.join(', ')}`);
        }
      } else {
        console.log(`   ‚ùå Erro: ${JSON.stringify(testResponse.data, null, 2)}`);
      }
    }
    
    // 6. Verificar se h√° dados brutos no banco
    console.log('\n6. üóÉÔ∏è  VERIFICA√á√ÉO DIRETA NO BANCO:');
    console.log('Vamos verificar se existem dados de KPI no banco de dados...');
    
    // Simular uma consulta SQL para verificar dados
    console.log('\n   üìä Estrutura esperada da tabela kpis:');
    console.log('   - id (integer)');
    console.log('   - nome_kpi (text)');
    console.log('   - funcao_kpi (text)');
    console.log('   - turno_kpi (text)');
    console.log('   - valor_kpi (numeric)');
    console.log('   - tipo_kpi (text)');
    console.log('   - meta_minima (numeric)');
    console.log('   - meta_maxima (numeric)');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
  }
}

// Executar verifica√ß√£o
checkKPIsLocal();