#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

console.log('üîç Analisando Fonte da Verdade no Netlify Dev...');
console.log('============================================================');

// 1. Verificar configura√ß√£o do netlify.toml
console.log('üìã 1. CONFIGURA√á√ÉO NETLIFY.TOML:');
const netlifyToml = fs.readFileSync('netlify.toml', 'utf8');
const buildCommand = netlifyToml.match(/command = "([^"]+)"/)?.[1];
console.log(`   Build command: ${buildCommand}`);

// 2. Verificar o que o api.ts importa
console.log('\nüìã 2. IMPORTA√á√ÉO NO API.TS:');
const apiTs = fs.readFileSync('netlify/functions-src/api.ts', 'utf8');
const importMatch = apiTs.match(/import\('([^']+)'\)/);
if (importMatch) {
  const importPath = importMatch[1];
  console.log(`   Importa: ${importPath}`);
  
  // Verificar se o arquivo existe
  const fullPath = path.resolve(importPath);
  const exists = fs.existsSync(fullPath);
  console.log(`   Arquivo existe: ${exists ? '‚úÖ' : '‚ùå'}`);
  
  if (exists) {
    const stats = fs.statSync(fullPath);
    console.log(`   √öltima modifica√ß√£o: ${stats.mtime.toLocaleString('pt-BR')}`);
    console.log(`   Tamanho: ${(stats.size / 1024).toFixed(2)} KB`);
  }
}

// 3. Verificar arquivos TypeScript vs JavaScript
console.log('\nüìã 3. COMPARA√á√ÉO DE ARQUIVOS:');
const workerTs = 'src/worker/supabase-worker.ts';
const workerJs = 'src/worker/supabase-worker.js';

if (fs.existsSync(workerTs)) {
  const tsStats = fs.statSync(workerTs);
  console.log(`   üìÑ ${workerTs}:`);
  console.log(`      Modificado: ${tsStats.mtime.toLocaleString('pt-BR')}`);
  console.log(`      Tamanho: ${(tsStats.size / 1024).toFixed(2)} KB`);
}

if (fs.existsSync(workerJs)) {
  const jsStats = fs.statSync(workerJs);
  console.log(`   üìÑ ${workerJs}:`);
  console.log(`      Modificado: ${jsStats.mtime.toLocaleString('pt-BR')}`);
  console.log(`      Tamanho: ${(jsStats.size / 1024).toFixed(2)} KB`);
}

// 4. Verificar package.json scripts
console.log('\nüìã 4. SCRIPTS DO PACKAGE.JSON:');
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
console.log(`   dev: ${packageJson.scripts.dev}`);
console.log(`   build:worker: ${packageJson.scripts['build:worker']}`);
console.log(`   build:netlify: ${packageJson.scripts['build:netlify']}`);

// 5. Conclus√£o
console.log('\n============================================================');
console.log('üéØ FONTE DA VERDADE NO NETLIFY DEV:');
console.log('');
console.log('1. üìù DESENVOLVIMENTO:');
console.log('   ‚Ä¢ Edite: src/worker/supabase-worker.ts e src/worker/routes/*.ts');
console.log('   ‚Ä¢ Compile: npm run build:worker');
console.log('   ‚Ä¢ Resultado: src/worker/supabase-worker.js (USADO PELO NETLIFY)');
console.log('');
console.log('2. üîÑ FLUXO NETLIFY DEV:');
console.log('   ‚Ä¢ netlify.toml ‚Üí api.ts ‚Üí supabase-worker.js');
console.log('   ‚Ä¢ O arquivo .js √© a fonte da verdade em RUNTIME');
console.log('   ‚Ä¢ O arquivo .ts √© a fonte da verdade para DESENVOLVIMENTO');
console.log('');
console.log('3. ‚ö†Ô∏è  IMPORTANTE:');
console.log('   ‚Ä¢ Netlify dev usa o arquivo .js compilado');
console.log('   ‚Ä¢ Mudan√ßas em .ts s√≥ aparecem ap√≥s build:worker');
console.log('   ‚Ä¢ Sempre recompile ap√≥s editar arquivos TypeScript');